                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4f004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f64804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71804000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #1900011102
                            | #王新昊
                            | # Describe how and why you modified the baseline code.
                            | #首先我们采取5.8节提到的循环展开，把原本的循环展开成10x1循环，这是提高程序运行效率的
                            | #第一步。同时可以采取多重变量累积的方法，错开利用两个寄存器错开同一个寄存器的内存存
                            | #取，避免加载\使用数据冒险，这样就形成了10x2循环。接下来的重点在于如何处理余项，可知
                            | #余项数目有十种可能，从0到9，因此完全可以将十种可能对应的取存地址运算穷举出来，并且可
                            | #以将0-9种余项数目分别对应到一系列取存地址运算的某一个位置，程序会自动进行剩下所有的
                            | #取存地址运算，便不再需要用到循环，可以节省时间。但在存取地址时，无法用到循环中的多重
                            | #变量累积，但可以在每次存取内存地址的间隙插入jxx判断，以提高对气泡的利用率。最后是对
                            | #应的操作，显然要用到条件转移，我们要做到尽量避免预测错误损失，考虑到用类似二叉搜索树
                            | #的结构，便可以得到不同的余项钟数处理时对应的位置。以上就是我们改良方案的思路。
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            |  # Loop header
0x032: c0f2f6ffffffffffffff |   iaddq $-10, %rdx
0x03c: 720602000000000000   |   jl Loop  # if so, goto Done:
0x045: 50a70000000000000000 | Loop1:  mrmovq (%rdi), %r10 # read val from src...
0x04f: 50b70800000000000000 |   mrmovq 8(%rdi), %r11
0x059: 62aa                 |   andq %r10, %r10
0x05b: 40a60000000000000000 |   rmmovq %r10, (%rsi)
0x065: 717800000000000000   |  jle Loop2
0x06e: c0f00100000000000000 |   iaddq $1, %rax
0x078: 50a71000000000000000 | Loop2:  mrmovq 16(%rdi), %r10
0x082: 40b60800000000000000 |   rmmovq %r11, 8(%rsi) # ...and store it to dst
0x08c: 62bb                 |   andq %r11, %r11
0x08e: 71a100000000000000   |   jle Loop3  # if so, goto Npos:
0x097: c0f00100000000000000 |   iaddq $1, %rax
0x0a1: 50b71800000000000000 | Loop3:  mrmovq 24(%rdi), %r11
0x0ab: 40a61000000000000000 |   rmmovq %r10, 16(%rsi) # ...and store it to dst
0x0b5: 62aa                 |   andq %r10, %r10
0x0b7: 71ca00000000000000   |   jle Loop4  # if so, goto Npos:
0x0c0: c0f00100000000000000 |   iaddq $1, %rax
0x0ca: 50a72000000000000000 | Loop4:  mrmovq 32(%rdi), %r10
0x0d4: 40b61800000000000000 |   rmmovq %r11, 24(%rsi) # ...and store it to dst
0x0de: 62bb                 |   andq %r11, %r11
0x0e0: 71f300000000000000   |   jle Loop5  # if so, goto Npos:
0x0e9: c0f00100000000000000 |   iaddq $1, %rax
0x0f3: 50b72800000000000000 | Loop5:  mrmovq 40(%rdi), %r11
0x0fd: 40a62000000000000000 |   rmmovq %r10, 32(%rsi) # ...and store it to dst
0x107: 62aa                 |   andq %r10, %r10
0x109: 711c01000000000000   |   jle Loop6  # if so, goto Npos:
0x112: c0f00100000000000000 |   iaddq $1, %rax
0x11c: 50a73000000000000000 | Loop6:  mrmovq 48(%rdi), %r10
0x126: 40b62800000000000000 |   rmmovq %r11, 40(%rsi) # ...and store it to dst
0x130: 62bb                 |   andq %r11, %r11
0x132: 714501000000000000   |   jle Loop7  # if so, goto Npos:
0x13b: c0f00100000000000000 |   iaddq $1, %rax
0x145: 50b73800000000000000 | Loop7:  mrmovq 56(%rdi), %r11
0x14f: 40a63000000000000000 |   rmmovq %r10, 48(%rsi) # ...and store it to dst
0x159: 62aa                 |   andq %r10, %r10
0x15b: 716e01000000000000   |   jle Loop8  # if so, goto Npos:
0x164: c0f00100000000000000 |   iaddq $1, %rax
0x16e: 50a74000000000000000 | Loop8:  mrmovq 64(%rdi), %r10
0x178: 40b63800000000000000 |   rmmovq %r11, 56(%rsi) # ...and store it to dst
0x182: 62bb                 |   andq %r11, %r11
0x184: 719701000000000000   |   jle Loop9  # if so, goto Npos:
0x18d: c0f00100000000000000 |   iaddq $1, %rax
0x197: 50b74800000000000000 | Loop9:  mrmovq 72(%rdi), %r11
0x1a1: 40a64000000000000000 |   rmmovq %r10, 64(%rsi) # ...and store it to dst
0x1ab: 62aa                 |   andq %r10, %r10
0x1ad: 71c001000000000000   |   jle Loop10   # if so, goto Npos:
0x1b6: c0f00100000000000000 |   iaddq $1, %rax
0x1c0: 40b64800000000000000 | Loop10: rmmovq %r11, 72(%rsi)
0x1ca: 62bb                 |   andq %r11, %r11
0x1cc: 71df01000000000000   |   jle Test1  # if so, goto Npos:
0x1d5: c0f00100000000000000 |   iaddq $1, %rax
0x1df: c0f75000000000000000 | Test1:  iaddq $80, %rdi  # src++
0x1e9: c0f65000000000000000 |   iaddq $80, %rsi  # dst++
0x1f3: c0f2f6ffffffffffffff |   iaddq $-10, %rdx # len-- + judge
0x1fd: 754500000000000000   |   jge Loop1  # if so, goto Loop:
0x206: c0f20700000000000000 | Loop:   iaddq $7, %rdx
0x210: 722b02000000000000   |   jl Less
0x219: 766e02000000000000   |   jg More
0x222: 708903000000000000   |   jmp End3
0x22b: c0f20200000000000000 | Less:  iaddq $2, %rdx
0x235: 73db03000000000000   |   je End1
0x23e: c0f2ffffffffffffffff |   iaddq $-1, %rdx
0x248: 73b203000000000000   |   je End2
0x251: 90                   |   ret
0x252: c0f20100000000000000 | MoreLess: iaddq $1, %rdx
0x25c: 726003000000000000   |    jl End4
0x265: 703703000000000000   |    jmp End5
0x26e: c0f2fdffffffffffffff | More:  iaddq $-3, %rdx
0x278: 725202000000000000   |   jl MoreLess
0x281: 730e03000000000000   |  je End6
0x28a: c0f2feffffffffffffff |  iaddq $-2, %rdx
0x294: 72e502000000000000   |  jl End7
0x29d: 73bc02000000000000   |  je End8
0x2a6: 50a74000000000000000 | End9: mrmovq 64(%rdi), %r10
0x2b0: 40a64000000000000000 |   rmmovq %r10, 64(%rsi)
0x2ba: 62aa                 |   andq %r10, %r10
0x2bc: 50a73800000000000000 | End8:  mrmovq 56(%rdi), %r10
0x2c6: 71d902000000000000   |  jle End71
0x2cf: c0f00100000000000000 |    iaddq $1, %rax
0x2d9: 40a63800000000000000 | End71: rmmovq %r10, 56(%rsi)
0x2e3: 62aa                 |   andq %r10, %r10
0x2e5: 50a73000000000000000 | End7:   mrmovq 48(%rdi), %r10
0x2ef: 710203000000000000   |    jle End61
0x2f8: c0f00100000000000000 |    iaddq $1, %rax
0x302: 40a63000000000000000 | End61:  rmmovq %r10, 48(%rsi)
0x30c: 62aa                 |   andq %r10, %r10
0x30e: 50a72800000000000000 | End6:   mrmovq 40(%rdi), %r10
0x318: 712b03000000000000   |    jle End51
0x321: c0f00100000000000000 |    iaddq $1, %rax
0x32b: 40a62800000000000000 | End51:  rmmovq %r10, 40(%rsi)
0x335: 62aa                 |   andq %r10, %r10
0x337: 50a72000000000000000 | End5:   mrmovq 32(%rdi), %r10
0x341: 715403000000000000   |    jle End41
0x34a: c0f00100000000000000 |    iaddq $1, %rax
0x354: 40a62000000000000000 | End41:  rmmovq %r10, 32(%rsi)
0x35e: 62aa                 |   andq %r10, %r10
0x360: 50a71800000000000000 | End4:   mrmovq 24(%rdi), %r10
0x36a: 717d03000000000000   |    jle End31
0x373: c0f00100000000000000 |    iaddq $1, %rax
0x37d: 40a61800000000000000 | End31:  rmmovq %r10, 24(%rsi)
0x387: 62aa                 |   andq %r10, %r10
0x389: 50a71000000000000000 | End3:   mrmovq 16(%rdi), %r10
0x393: 71a603000000000000   |    jle End21
0x39c: c0f00100000000000000 |    iaddq $1, %rax
0x3a6: 40a61000000000000000 | End21:  rmmovq %r10, 16(%rsi)
0x3b0: 62aa                 |   andq %r10, %r10
0x3b2: 50a70800000000000000 | End2:   mrmovq 8(%rdi), %r10
0x3bc: 71cf03000000000000   |    jle End11
0x3c5: c0f00100000000000000 |    iaddq $1, %rax
0x3cf: 40a60800000000000000 | End11:  rmmovq %r10, 8(%rsi)
0x3d9: 62aa                 |   andq %r10, %r10
0x3db: 50a70000000000000000 | End1:   mrmovq (%rdi), %r10
0x3e5: 71f803000000000000   |    jle End01
0x3ee: c0f00100000000000000 |    iaddq $1, %rax
0x3f8: 40a60000000000000000 | End01:  rmmovq %r10, (%rsi)
0x402: 62aa                 |   andq %r10, %r10
0x404: 711704000000000000   |   jle Done
0x40d: c0f00100000000000000 |   iaddq $1, %rax
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x417:                      | Done:
0x417: 90                   |   ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x418:                      | End:
                            | #/* $end ncopy-ys */
0x418:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x418:                      | 	.align 8
0x418:                      | src:
0x418: 0100000000000000     | 	.quad 1
0x420: feffffffffffffff     | 	.quad -2
0x428: fdffffffffffffff     | 	.quad -3
0x430: 0400000000000000     | 	.quad 4
0x438: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x440:                      | 	.align 16
0x440:                      | Predest:
0x440: fadebc0000000000     | 	.quad 0xbcdefa
0x448:                      | dest:
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468:                      | Postdest:
0x468: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x470:                      | .align 8
                            | # Run time stack
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
0x4d0: 0000000000000000     | 	.quad 0
0x4d8: 0000000000000000     | 	.quad 0
0x4e0: 0000000000000000     | 	.quad 0
0x4e8: 0000000000000000     | 	.quad 0
                            | 
0x4f0:                      | Stack:
