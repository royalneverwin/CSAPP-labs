#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#1900011102
#王新昊
# Describe how and why you modified the baseline code.
#首先我们采取5.8节提到的循环展开，把原本的循环展开成10x1循环，这是提高程序运行效率的
#第一步。同时可以采取多重变量累积的方法，错开利用两个寄存器错开同一个寄存器的内存存
#取，避免加载\使用数据冒险，这样就形成了10x2循环。接下来的重点在于如何处理余项，可知
#余项数目有十种可能，从0到9，因此完全可以将十种可能对应的取存地址运算穷举出来，并且可
#以将0-9种余项数目分别对应到一系列取存地址运算的某一个位置，程序会自动进行剩下所有的
#取存地址运算，便不再需要用到循环，可以节省时间。但在存取地址时，无法用到循环中的多重
#变量累积，但可以在每次存取内存地址的间隙插入jxx判断，以提高对气泡的利用率。最后是对
#应的操作，显然要用到条件转移，我们要做到尽量避免预测错误损失，考虑到用类似二叉搜索树
#的结构，便可以得到不同的余项钟数处理时对应的位置。以上就是我们改良方案的思路。
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
 # Loop header
  iaddq $-10, %rdx
  jl Loop  # if so, goto Done:
Loop1:  mrmovq (%rdi), %r10 # read val from src...
  mrmovq 8(%rdi), %r11
  andq %r10, %r10
  rmmovq %r10, (%rsi)
 jle Loop2
  iaddq $1, %rax
Loop2:  mrmovq 16(%rdi), %r10
  rmmovq %r11, 8(%rsi) # ...and store it to dst
  andq %r11, %r11
  jle Loop3  # if so, goto Npos:
  iaddq $1, %rax
Loop3:  mrmovq 24(%rdi), %r11
  rmmovq %r10, 16(%rsi) # ...and store it to dst
  andq %r10, %r10
  jle Loop4  # if so, goto Npos:
  iaddq $1, %rax
Loop4:  mrmovq 32(%rdi), %r10
  rmmovq %r11, 24(%rsi) # ...and store it to dst
  andq %r11, %r11
  jle Loop5  # if so, goto Npos:
  iaddq $1, %rax
Loop5:  mrmovq 40(%rdi), %r11
  rmmovq %r10, 32(%rsi) # ...and store it to dst
  andq %r10, %r10
  jle Loop6  # if so, goto Npos:
  iaddq $1, %rax
Loop6:  mrmovq 48(%rdi), %r10
  rmmovq %r11, 40(%rsi) # ...and store it to dst
  andq %r11, %r11
  jle Loop7  # if so, goto Npos:
  iaddq $1, %rax
Loop7:  mrmovq 56(%rdi), %r11
  rmmovq %r10, 48(%rsi) # ...and store it to dst
  andq %r10, %r10
  jle Loop8  # if so, goto Npos:
  iaddq $1, %rax
Loop8:  mrmovq 64(%rdi), %r10
  rmmovq %r11, 56(%rsi) # ...and store it to dst
  andq %r11, %r11
  jle Loop9  # if so, goto Npos:
  iaddq $1, %rax
Loop9:  mrmovq 72(%rdi), %r11
  rmmovq %r10, 64(%rsi) # ...and store it to dst
  andq %r10, %r10
  jle Loop10   # if so, goto Npos:
  iaddq $1, %rax
Loop10: rmmovq %r11, 72(%rsi)
  andq %r11, %r11
  jle Test1  # if so, goto Npos:
  iaddq $1, %rax
Test1:  iaddq $80, %rdi  # src++
  iaddq $80, %rsi  # dst++
  iaddq $-10, %rdx # len-- + judge
  jge Loop1  # if so, goto Loop:
Loop:   iaddq $7, %rdx
  jl Less
  jg More
  jmp End3
Less:  iaddq $2, %rdx
  je End1
  iaddq $-1, %rdx
  je End2
  ret
MoreLess: iaddq $1, %rdx
   jl End4
   jmp End5
More:  iaddq $-3, %rdx
  jl MoreLess
 je End6
 iaddq $-2, %rdx
 jl End7
 je End8
End9: mrmovq 64(%rdi), %r10
  rmmovq %r10, 64(%rsi)
  andq %r10, %r10
End8:  mrmovq 56(%rdi), %r10
 jle End71
   iaddq $1, %rax
End71: rmmovq %r10, 56(%rsi)
  andq %r10, %r10
End7:   mrmovq 48(%rdi), %r10
   jle End61
   iaddq $1, %rax
End61:  rmmovq %r10, 48(%rsi)
  andq %r10, %r10
End6:   mrmovq 40(%rdi), %r10
   jle End51
   iaddq $1, %rax
End51:  rmmovq %r10, 40(%rsi)
  andq %r10, %r10
End5:   mrmovq 32(%rdi), %r10
   jle End41
   iaddq $1, %rax
End41:  rmmovq %r10, 32(%rsi)
  andq %r10, %r10
End4:   mrmovq 24(%rdi), %r10
   jle End31
   iaddq $1, %rax
End31:  rmmovq %r10, 24(%rsi)
  andq %r10, %r10
End3:   mrmovq 16(%rdi), %r10
   jle End21
   iaddq $1, %rax
End21:  rmmovq %r10, 16(%rsi)
  andq %r10, %r10
End2:   mrmovq 8(%rdi), %r10
   jle End11
   iaddq $1, %rax
End11:  rmmovq %r10, 8(%rsi)
  andq %r10, %r10
End1:   mrmovq (%rdi), %r10
   jle End01
   iaddq $1, %rax
End01:  rmmovq %r10, (%rsi)
  andq %r10, %r10
  jle Done
  iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad -2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
